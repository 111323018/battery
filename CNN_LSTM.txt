import datetime
import numpy as np
import pandas as pd
from scipy.io import loadmat
import os
import matplotlib.pyplot as plt
import seaborn as sns
import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader, TensorDataset
import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
import torch.nn.functional as F
import time

#定義device
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
print("Using device:", device)

# 注意需要將每個電池的 mat 檔放在此文記資料夾中
def load_data(batteries):
    # 初始化計數器和數據集列表
    counter = 0
    dataset = []
    capacity_data = []
    
    # 迭代處理每個電池
    for battery in batteries:
        # 載入 '.mat' 檔案中的數據
        mat = loadmat('battery_data/' + battery + '.mat')
        
        # 輸出總共的數據筆數
        print(f'Total data in dataset for {battery}: ', len(mat[battery][0, 0]['cycle'][0]))
        
        # 迭代處理每一個週期的數據
        for i in range(len(mat[battery][0, 0]['cycle'][0])):
            row = mat[battery][0, 0]['cycle'][0, i]
            
            # 只處理 'discharge' 類型的數據
            if row['type'][0] == 'discharge':
                ambient_temperature = row['ambient_temperature'][0][0]
                
                # 將時間信息轉換為 datetime 對象
                date_time = datetime.datetime(int(row['time'][0][0]),
                                               int(row['time'][0][1]),
                                               int(row['time'][0][2]),
                                               int(row['time'][0][3]),
                                               int(row['time'][0][4])) + datetime.timedelta(seconds=int(row['time'][0][5]))
                
                data = row['data']
                capacity = data[0][0]['Capacity'][0][0]
                
                # 迭代處理每個時間步的數據
                for j in range(len( data[0][0]['Temperature_measured'][0])):
                    temperature_measured = data[0][0]['Temperature_measured'][0][j]
                    current_load = data[0][0]['Current_load'][0][j]
                    voltage_load = data[0][0]['Voltage_load'][0][j]
                    time = data[0][0]['Time'][0][j]
                    
                    # 將數據添加到數據集中
                    dataset.append([counter + 1, ambient_temperature, date_time, capacity,
                                    temperature_measured, current_load,
                                    voltage_load, time])
                
                # 將電池容量數據添加到容量數據集中
                capacity_data.append([counter + 1, ambient_temperature, date_time, capacity])
                counter = counter + 1
                
    # 輸出第一筆數據
    print(dataset[0])
    
    # 返回數據集和電池容量數據集
    return [pd.DataFrame(data=dataset,
                         columns=['cycle', 'ambient_temperature', 'datetime',
                                  'capacity', 'temperature_measured',
                                  'current_load', 'voltage_load', 'time']),
            pd.DataFrame(data=capacity_data,
                         columns=['cycle', 'ambient_temperature', 'datetime',
                                  'capacity'])]

# 使用 ['B0005', 'B0006', 'B0007', 'B0018'] 作為電池編號載入數據
dataset, capacity = load_data(['B0029', 'B0030', 'B0031', 'B0032'])

# 設置 pandas 的顯示選項
pd.set_option('display.max_columns', 10)

# 輸出數據集的前幾行
print(dataset.head())

# 描述性統計
dataset.describe()

# 選取需要的特徵（'cycle', 'datetime', 'capacity'）
attrib=['cycle', 'datetime', 'capacity']
dis_ele = capacity[attrib]

# 獲取初始電池容量（第一個循環的容量）
C = dis_ele['capacity'][0]

# 迭代處理每一行數據
for i in range(len(dis_ele)):
    # 計算電池狀態健康度（SoH），將其添加到 DataFrame 中
    dis_ele['SoH'] = (dis_ele['capacity']) / C
    
# 從數據集中獲取初始電池容量
C = dataset['capacity'][0]

# 計算狀態健康度（SoH）並轉換為 PyTorch 张量
soh = torch.tensor(dataset['capacity'].values / C, dtype=torch.float32).view(-1, 1)
soh = soh.unsqueeze(1)  # 添加一個額外的維度，以便與 PyTorch 兼容


# 選取需要的特徵
attribs = ['capacity', 'temperature_measured','current_load', 'voltage_load', 'time']

# 提取所選屬性的特徵
train_dataset = torch.tensor(dataset[attribs].values, dtype=torch.float32)

# 正規化數據
min_vals = torch.min(train_dataset, dim=0).values
max_vals = torch.max(train_dataset, dim=0).values
train_dataset = (train_dataset - min_vals) / (max_vals - min_vals)
train_dataset = train_dataset.unsqueeze(1)
# 假設 train_dataset 是一個時間序列，可能需要根據特定需求進行形狀調整
# 根據實際需求，可能需要根據特定的形狀需求來重新塑造 train_dataset


# define LSTM model
class CNN_LSTM(nn.Module):
    def __init__(self, input_size, hidden_size, output_size):
        super(CNN_LSTM, self).__init__()

        # 第一層 CNN
        self.cnn = nn.Sequential(
        nn.Conv1d(in_channels=1, out_channels=64, kernel_size=1),
        nn.ReLU(),
        nn.Flatten()
        )

        # 第一層 LSTM
        self.lstm1 = nn.LSTMCell(64*5, hidden_size)  # 輸入通道數為 32*5
        self.dropout1 = nn.Dropout(0.07)
        # 第二層 LSTM
        self.lstm2 = nn.LSTMCell(hidden_size, hidden_size)
        self.dropout2 = nn.Dropout(0.09)
        # 第三層 LSTM
        self.lstm3 = nn.LSTMCell(hidden_size, hidden_size)
        self.dropout3 = nn.Dropout(0.09)
        # 第四層 LSTM
        self.lstm4 = nn.LSTMCell(hidden_size, hidden_size)
        self.dropout4 = nn.Dropout(0.12)

        # 最後的全連接層
        self.fc = nn.Linear(hidden_size, output_size)

    def forward(self, x):
        # 第一層 CNN
        cnn_output = self.cnn(x)

        # 第一層 LSTM
        h_t, c_t = self.lstm1(cnn_output)
        out = self.dropout1(h_t)
        # 第二層 LSTM
        h_t, c_t = self.lstm2(out)
        out = self.dropout2(h_t)
        # 第三層 LSTM
        h_t, c_t = self.lstm3(out)
        out = self.dropout3(h_t)
        # 第四層 LSTM
        h_t, c_t = self.lstm4(out)
        out = self.dropout4(h_t)

        # 最後的全連接層，取最後一個時間步的輸出
        out = self.fc(out)

        return out

# Define the PyTorch model, loss function, and optimizer
input_size = len(attribs)
print(attribs)
hidden_size = 224
output_size = 1
regress = CNN_LSTM(input_size,hidden_size, output_size).to(device)
criterion = nn.MSELoss()
optimizer = optim.Adam(regress.parameters(), lr=0.01)

# Convert the dataset and labels to PyTorch DataLoader
train_data = TensorDataset(train_dataset, soh)
train_loader = DataLoader(train_data, batch_size=32, shuffle=True)

# Training the model
num_epochs = 10
start_time=time.time()
for epoch in range(num_epochs):
    for inputs, labels in train_loader:
        inputs, labels =  inputs.to(device), labels.to(device)
        optimizer.zero_grad()
        outputs = regress(inputs)
        loss = criterion(outputs, labels.squeeze(1))
        loss.backward()
        optimizer.step()
        #print(f'Epoch [{epoch+1}/{num_epochs}], Loss: {loss.item()}')
end_time=time.time()
print("training time:",end_time-start_time)
regress = regress.to('cpu')

# Print model summary
# Example of using the trained model for prediction'
# Assuming 'test_input' is a tensor of shape (batch_size, input_size)
for inputs, labels in train_loader:
    predicted_soh = regress(inputs)
    predicted_soh = predicted_soh.detach().numpy()

    # You can use 'predicted_soh' for further analysis or visualization
#    print(predicted_soh)
#    print(labels)
model_params = regress.state_dict()

def load_data1(battery):
  mat = loadmat('battery_data/' + battery + '.mat')
  print('Total data in dataset: ', len(mat[battery][0, 0]['cycle'][0]))
  counter = 0
  dataset = []
  capacity_data = []
  
  for i in range(len(mat[battery][0, 0]['cycle'][0])):
    row = mat[battery][0, 0]['cycle'][0, i]
    if row['type'][0] == 'discharge':
      ambient_temperature = row['ambient_temperature'][0][0]
      date_time = datetime.datetime(int(row['time'][0][0]),
                               int(row['time'][0][1]),
                               int(row['time'][0][2]),
                               int(row['time'][0][3]),
                               int(row['time'][0][4])) + datetime.timedelta(seconds=int(row['time'][0][5]))
      data = row['data']
      capacity = data[0][0]['Capacity'][0][0]
      for j in range(len(data[0][0]['Temperature_measured'][0])):
        temperature_measured = data[0][0]['Temperature_measured'][0][j]
        current_load = data[0][0]['Current_load'][0][j]
        voltage_load = data[0][0]['Voltage_load'][0][j]
        time = data[0][0]['Time'][0][j]
        dataset.append([counter + 1, ambient_temperature, date_time, capacity,
                        temperature_measured, current_load,
                        voltage_load, time])
      capacity_data.append([counter + 1, ambient_temperature, date_time, capacity])
      counter = counter + 1
  print(dataset[0])
  return [pd.DataFrame(data=dataset,
                       columns=['cycle', 'ambient_temperature', 'datetime',
                                'capacity','temperature_measured',
                                'current_load', 'voltage_load', 'time']),
          pd.DataFrame(data=capacity_data,
                       columns=['cycle', 'ambient_temperature', 'datetime',
                                'capacity'])]

# 載入驗證數據集
dataset_val, capacity_val = load_data1('B0030')

# 選擇指定特徵
attrib = ['cycle', 'datetime', 'capacity']
dis_ele = capacity_val[attrib]

# 計算初始容量並計算狀態健康度
C = dis_ele['capacity'][0]
for i in range(len(dis_ele)):
    dis_ele['SoH'] = (dis_ele['capacity']) / C

# 印出數據集的前五行
print(dataset_val.head(5))
print(dis_ele.head(5))

# 選擇其他特徵
attrib = ['capacity', 'temperature_measured', 'current_load', 'voltage_load', 'time']

# Convert DataFrame to PyTorch tensor
dataset_val_tensor = torch.tensor(dataset_val[attrib].values, dtype=torch.float32)

# Calculate mean and standard deviation
mean = torch.mean(dataset_val_tensor, dim=0)
std = torch.std(dataset_val_tensor, dim=0)

# Normalize the entire dataset 

min_vals_tensor= torch.min(dataset_val_tensor, dim=0).values
max_vals_tensor = torch.max(dataset_val_tensor, dim=0).values
# 使用 min 和 max 值進行標準化
normalized_dataset_val = (dataset_val_tensor - min_vals_tensor) / (max_vals_tensor - min_vals_tensor)

# 或者使用平均值和標準差進行標準化
#normalized_dataset_val = (dataset_val_tensor - mean) / std
normalized_dataset_val = normalized_dataset_val.unsqueeze(1)
# Make predictions
soh_pred = regress(normalized_dataset_val)

print(soh_pred.size())

# Assuming 'dataset_val' has a 'cycle' column
new_soh = pd.DataFrame({'cycle': dataset_val['cycle'], 'SoH': dataset_val['capacity'] / C, 'NewSoH': soh_pred.detach().numpy().flatten()})
new_soh = new_soh.groupby(['cycle']).mean().reset_index()

print(new_soh.head(10))

# Calculate RMSE
predicted_soh_np = soh_pred.detach().numpy()

# 使用 PyTorch 提供的均方差函數計算 RMSE
rms = torch.sqrt(F.mse_loss(torch.tensor(new_soh['SoH'].values), torch.tensor(predicted_soh_np)))
print('Root Mean Square Error: ', rms.item())


plot_df = new_soh.loc[(new_soh['cycle']>=1),['cycle','SoH', 'NewSoH']]
sns.set_style("white")
plt.figure(figsize=(16, 10))
plt.plot(plot_df['cycle'], plot_df['SoH'], label='SoH')
plt.plot(plot_df['cycle'], plot_df['NewSoH'], label='Predicted SoH')
#Draw threshold
#plt.plot([0.,len(capacity)], [0.70, 0.70], label='Threshold')
plt.ylabel('SOH')
# make x-axis ticks legible
adf = plt.gca().get_xaxis().get_major_formatter()
plt.xlabel('cycle')
plt.legend()
plt.title('Discharge B0030')